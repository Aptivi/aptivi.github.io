@page "/projects"

<PageTitle>Projects - Aptivi</PageTitle>

@using System.Threading;
@using System.Net;
@using System.Text;
@using aptivi.github.io.Data
@using System.IO
@using System.Text.Json
@inject NavigationManager NavManager

<Hero Title="Our projects">
	Here lists all our projects that are published to the public at our GitHub. Also, it shows relevant links to their
	NuGet packages and their release pages so that you can easily download them from here.
</Hero>

@if (projects is not null)
{
	<div class="row mb-3">
		@foreach (var project in projects)
		{
			string org = string.IsNullOrEmpty(project.ProjectOrg) ? "Aptivi" : $"Aptivi-{project.ProjectOrg}";
			string finalImageName = !string.IsNullOrEmpty(project.ProjectImageName) ? project.ProjectImageName : project.ProjectName;
			<div class="col-lg-4">
				<div class="card">
					<div class="card-body">
						<div class="icon-square-projects">
							<object data="assets/applogos/OfficialAppIcon-@finalImageName-512.png" type="image/jpeg" height="128" width="128"><img src="assets/logos/aptivi-logo-transparent-ios.png" height="128" width="128" /></object>
						</div>
						<h5 class="card-title">@project.ProjectName</h5>
						<p class="card-text">@project.Description</p>
						@if (org != "Aptivi")
						{
							string orgName = orgs[org];
							<p class="card-text sub"><small>by @orgName</small></p>
						}
						<div class="di-grid gap-2 d-sm-flex">
							@if (project.ProjectHasLanding)
							{
								<a href="@finalImageName" class="btn btn-primary">Learn more...</a>
							}
							<div class="dropdown">
								<button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">Download...</button>
								<ul class="dropdown-menu jumbotron translucency-rule">
									@if (project.NuGetPackages is not null)
									{
										<li><h6 class="dropdown-header user-select-none">NuGet packages</h6></li>
										@foreach (string nugetPackageName in project.NuGetPackages)
										{
											<li><a class="dropdown-item d-flex gap-2 align-items-center user-select-none" @onclick="@(e => NavManager.NavigateTo($"https://nuget.org/packages/{nugetPackageName}"))"><span class="fa fa-cubes" aria-hidden="true" /> @nugetPackageName</a></li>
										}
										<li><hr class="dropdown-divider"></li>
									}
									<li><h6 class="dropdown-header user-select-none">Source code</h6></li>
									<li><a class="dropdown-item d-flex gap-2 align-items-center user-select-none" @onclick="@(e => NavManager.NavigateTo($"https://github.com/{org}/{project.ProjectSlug}"))"><span class="fab fa-github" aria-hidden="true" /> GitHub</a></li>
									<li><hr class="dropdown-divider"></li>
									<li><h6 class="dropdown-header user-select-none">Documentation</h6></li>
									<li><a class="dropdown-item d-flex gap-2 align-items-center user-select-none" @onclick="@(e => NavManager.NavigateTo($"https://aptivi.gitbook.io/{project.ProjectGBSlug}"))"><span class="fa-solid fa-book" aria-hidden="true" /> GitBook manual</a></li>
									<li><a class="dropdown-item d-flex gap-2 align-items-center user-select-none" @onclick="@(e => NavManager.NavigateTo($"https://aptivi.github.io/{project.ProjectSlug}"))"><span class="fa-solid fa-code" aria-hidden="true" /> API reference</a></li>
								</ul>
							</div>
						</div>
					</div>
				</div>
			</div>
		}
	</div>
}

@code {
	private static Project[] projects;
	private static Dictionary<string, string> orgs = new()
	{
		{"Aptivi-Analytics", "Aptivi Analytics"},
		{"Aptivi-Archives", "Aptivi Archives"},
		{"Aptivi-Choco-Pack", "Aptivi Chocolatey Pack"},
		{"Aptivi-Docs", "Aptivi Docs"},
		{"Aptivi-Stable-Docs", "Aptivi Stable Docs"},
		{"Aptivi-Assorted", "Aptivi Assorted"},
		{"Aptivi-Mobile", "Aptivi Mobile"},
		{"Aptivi-WPT", "Aptivi Windows PowerTools"},
		{"Aptivi-LPT", "Aptivi Linux PowerTools"},
	};

	protected override async Task OnInitializedAsync()
	{
		if (projects is null)
		{
			Stream stream = typeof(Project).Assembly.GetManifestResourceStream("aptivi.github.io.Resources.Projects.json");
			projects = (Project[])await JsonSerializer.DeserializeAsync(stream, typeof(Project[]));
		}
	}
}
